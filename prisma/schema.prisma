datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
    id Int @id @default(autoincrement())
    email String @unique
    firstName String?
    lastName String?
    social Json?
    courses CourseEnrollment[]
    testResults TestResult[] @relation(name: "results")
    testsGraded TestResult[] @relation(name: "graded")
    tokens Token[]
}

model Token {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime

  // Relation fields
  user   User @relation(fields: [userId], references: [id])
  userId Int
}


model Course {
    id Int @id @default(autoincrement())
    name String
    courseDetails String
    members CourseEnrollment[]
    tests Test[]
}


model Test {
    id Int @id @default(autoincrement())
    updatedAt DateTime @updatedAt
    name String
    date DateTime
    courseId Int
    course Course @relation(fields: [courseId], references: [id])
    testResults TestResult[]
}


model TestResult {
    id Int @id @default(autoincrement())
    createdAt DateTime? @default(now())
    result Int
    testId Int
    test Test @relation(fields: [testId], references: [id])
    studentId Int
    student User @relation(name: "results", fields: [studentId], references: [id])
    graderId Int
    grader User @relation(name: "graded", fields: [graderId], references: [id])
}

model CourseEnrollment {
    createdAt DateTime @default(now())
    role UserRole

    // Relation Fiels
    userId Int
    courseId Int
    user User @relation(fields: [userId], references: [id])
    course Course @relation(fields: [courseId], references: [id])

    @@id([userId, courseId, role])
    @@index([userId, role])
}

enum UserRole {
    STUDENT
    TEACHER
}

enum TokenType {
  EMAIL // used as a short-lived token sent to the user's email
  API
}